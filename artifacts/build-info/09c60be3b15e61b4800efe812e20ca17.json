{
	"id": "09c60be3b15e61b4800efe812e20ca17",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.21",
	"solcLongVersion": "0.8.21+commit.d9974bed",
	"input": {
		"language": "Solidity",
		"sources": {
			"IERC6551Account.sol": {
				"content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.21;\n/// @dev the ERC-165 identifier for this interface is `0x400a0398`\ninterface IERC6551Account {\n    /// @dev Token bound accounts MUST implement a `receive` function.\n    ///\n    /// Token bound accounts MAY perform arbitrary logic to restrict conditions\n    /// under which Ether can be received.\n    receive() external payable;\n\n    /// @dev initialize function is used to initialize the tken bound account\n    /// after any ownership change\n    ///\n    /// The function can only be called by current owner of token\n    ///\n    /// The function is used to tract current and previous owner of the NFT\n    /// which is used during circular locks and to prevent previous owner to call \n    /// the functions of the contract\n    ///\n    /// @return the status of the call in boolean format\n    function initialize() external returns (bool);\n\n    /// @dev the function is used to transfer token during the situations \n    /// of circular lock\n    ///\n    /// The function first checks the circular lock condition i.e. when \n    /// address(this) equals to the address returned by owner() function\n    ///\n    /// The function checks if the call is created by previous owner or not\n    /// and transfer ownership of token to the previous owner\n    ///\n    /// @return the status of the call in boolean format\n    function unlockCircularLock() external returns (bool);\n\n\n    /// @dev Executes `call` on address `to`, with value `value` and calldata\n    /// `data`.\n    ///\n    /// MUST revert and bubble up errors if call fails.\n    ///\n    /// By default, token bound accounts MUST allow the owner of the ERC-721 token\n    /// which owns the account to execute arbitrary calls using `executeCall`.\n    ///\n    /// Token bound accounts MAY implement additional authorization mechanisms\n    /// which limit the ability of the ERC-721 token holder to execute calls.\n    ///\n    /// Token bound accounts MAY implement additional execution functions which\n    /// grant execution permissions to other non-owner accounts.\n    ///\n    /// @return The result of the call\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external payable returns (bytes memory);\n\n    /// @dev Returns identifier of the ERC-721 token which owns the\n    /// account\n    ///\n    /// The return value of this function MUST be constant - it MUST NOT change\n    /// over time.\n    ///\n    /// @return chainId The EIP-155 ID of the chain the ERC-721 token exists on\n    /// @return tokenContract The contract address of the ERC-721 token\n    /// @return tokenId The ID of the ERC-721 token\n    function token()\n        external\n        view\n        returns (\n            uint256 chainId,\n            address tokenContract,\n            uint256 tokenId\n        );\n\n    /// @dev Returns the owner of the ERC-721 token which controls the account\n    /// if the token exists.\n    ///\n    /// This is value is obtained by calling `ownerOf` on the ERC-721 contract.\n    ///\n    /// @return Address of the owner of the ERC-721 token which owns the account\n    function owner() external view returns (address);\n\n    /// @dev Returns a nonce value that is updated on every successful transaction\n    ///\n    /// @return The current account nonce\n  //  function nonce() external view returns (uint256);\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"evmVersion": "paris"
		}
	},
	"output": {
		"contracts": {
			"IERC6551Account.sol": {
				"IERC6551Account": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "executeCall",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialize",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "tokenContract",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unlockCircularLock",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"details": "the ERC-165 identifier for this interface is `0x400a0398`",
						"kind": "dev",
						"methods": {
							"executeCall(address,uint256,bytes)": {
								"details": "Executes `call` on address `to`, with value `value` and calldata `data`. MUST revert and bubble up errors if call fails. By default, token bound accounts MUST allow the owner of the ERC-721 token which owns the account to execute arbitrary calls using `executeCall`. Token bound accounts MAY implement additional authorization mechanisms which limit the ability of the ERC-721 token holder to execute calls. Token bound accounts MAY implement additional execution functions which grant execution permissions to other non-owner accounts.",
								"returns": {
									"_0": "The result of the call"
								}
							},
							"initialize()": {
								"details": "initialize function is used to initialize the tken bound account after any ownership change The function can only be called by current owner of token The function is used to tract current and previous owner of the NFT which is used during circular locks and to prevent previous owner to call  the functions of the contract",
								"returns": {
									"_0": "the status of the call in boolean format"
								}
							},
							"owner()": {
								"details": "Returns the owner of the ERC-721 token which controls the account if the token exists. This is value is obtained by calling `ownerOf` on the ERC-721 contract.",
								"returns": {
									"_0": "Address of the owner of the ERC-721 token which owns the account"
								}
							},
							"token()": {
								"details": "Returns identifier of the ERC-721 token which owns the account The return value of this function MUST be constant - it MUST NOT change over time.",
								"returns": {
									"chainId": "The EIP-155 ID of the chain the ERC-721 token exists on",
									"tokenContract": "The contract address of the ERC-721 token",
									"tokenId": "The ID of the ERC-721 token"
								}
							},
							"unlockCircularLock()": {
								"details": "the function is used to transfer token during the situations  of circular lock The function first checks the circular lock condition i.e. when  address(this) equals to the address returned by owner() function The function checks if the call is created by previous owner or not and transfer ownership of token to the previous owner",
								"returns": {
									"_0": "the status of the call in boolean format"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"executeCall(address,uint256,bytes)": "9e5d4c49",
							"initialize()": "8129fc1c",
							"owner()": "8da5cb5b",
							"token()": "fc0c546a",
							"unlockCircularLock()": "b9ee088f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockCircularLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"the ERC-165 identifier for this interface is `0x400a0398`\",\"kind\":\"dev\",\"methods\":{\"executeCall(address,uint256,bytes)\":{\"details\":\"Executes `call` on address `to`, with value `value` and calldata `data`. MUST revert and bubble up errors if call fails. By default, token bound accounts MUST allow the owner of the ERC-721 token which owns the account to execute arbitrary calls using `executeCall`. Token bound accounts MAY implement additional authorization mechanisms which limit the ability of the ERC-721 token holder to execute calls. Token bound accounts MAY implement additional execution functions which grant execution permissions to other non-owner accounts.\",\"returns\":{\"_0\":\"The result of the call\"}},\"initialize()\":{\"details\":\"initialize function is used to initialize the tken bound account after any ownership change The function can only be called by current owner of token The function is used to tract current and previous owner of the NFT which is used during circular locks and to prevent previous owner to call  the functions of the contract\",\"returns\":{\"_0\":\"the status of the call in boolean format\"}},\"owner()\":{\"details\":\"Returns the owner of the ERC-721 token which controls the account if the token exists. This is value is obtained by calling `ownerOf` on the ERC-721 contract.\",\"returns\":{\"_0\":\"Address of the owner of the ERC-721 token which owns the account\"}},\"token()\":{\"details\":\"Returns identifier of the ERC-721 token which owns the account The return value of this function MUST be constant - it MUST NOT change over time.\",\"returns\":{\"chainId\":\"The EIP-155 ID of the chain the ERC-721 token exists on\",\"tokenContract\":\"The contract address of the ERC-721 token\",\"tokenId\":\"The ID of the ERC-721 token\"}},\"unlockCircularLock()\":{\"details\":\"the function is used to transfer token during the situations  of circular lock The function first checks the circular lock condition i.e. when  address(this) equals to the address returned by owner() function The function checks if the call is created by previous owner or not and transfer ownership of token to the previous owner\",\"returns\":{\"_0\":\"the status of the call in boolean format\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"IERC6551Account.sol\":\"IERC6551Account\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"IERC6551Account.sol\":{\"keccak256\":\"0xbb15761f6d806fe85e8a9716845d6177ffeb748d2b0cd128cc3c5066434fe94e\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://3a69eed9c1b20983c5cb4c92f1a39a383e00328bee9ab41be92f859ffffe2e63\",\"dweb:/ipfs/Qmbo78TXdLoBiu1ye5XvyYtB1A4uEsGpAy5R7ZbSzrx51U\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"IERC6551Account.sol": {
				"ast": {
					"absolutePath": "IERC6551Account.sol",
					"exportedSymbols": {
						"IERC6551Account": [
							47
						]
					},
					"id": 48,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".21"
							],
							"nodeType": "PragmaDirective",
							"src": "38:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC6551Account",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "63:67:0",
								"text": "@dev the ERC-165 identifier for this interface is `0x400a0398`"
							},
							"fullyImplemented": false,
							"id": 47,
							"linearizedBaseContracts": [
								47
							],
							"name": "IERC6551Account",
							"nameLocation": "140:15:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "162:197:0",
										"text": "@dev Token bound accounts MUST implement a `receive` function.\n Token bound accounts MAY perform arbitrary logic to restrict conditions\n under which Ether can be received."
									},
									"id": 6,
									"implemented": false,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "371:2:0"
									},
									"returnParameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:0:0"
									},
									"scope": 47,
									"src": "364:27:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 7,
										"nodeType": "StructuredDocumentation",
										"src": "397:452:0",
										"text": "@dev initialize function is used to initialize the tken bound account\n after any ownership change\n The function can only be called by current owner of token\n The function is used to tract current and previous owner of the NFT\n which is used during circular locks and to prevent previous owner to call \n the functions of the contract\n @return the status of the call in boolean format"
									},
									"functionSelector": "8129fc1c",
									"id": 12,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "863:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "873:2:0"
									},
									"returnParameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "894:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 9,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "894:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "893:6:0"
									},
									"scope": 47,
									"src": "854:46:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 13,
										"nodeType": "StructuredDocumentation",
										"src": "906:460:0",
										"text": "@dev the function is used to transfer token during the situations \n of circular lock\n The function first checks the circular lock condition i.e. when \n address(this) equals to the address returned by owner() function\n The function checks if the call is created by previous owner or not\n and transfer ownership of token to the previous owner\n @return the status of the call in boolean format"
									},
									"functionSelector": "b9ee088f",
									"id": 18,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unlockCircularLock",
									"nameLocation": "1380:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1398:2:0"
									},
									"returnParameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "1419:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 15,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1419:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1418:6:0"
									},
									"scope": 47,
									"src": "1371:54:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 19,
										"nodeType": "StructuredDocumentation",
										"src": "1432:688:0",
										"text": "@dev Executes `call` on address `to`, with value `value` and calldata\n `data`.\n MUST revert and bubble up errors if call fails.\n By default, token bound accounts MUST allow the owner of the ERC-721 token\n which owns the account to execute arbitrary calls using `executeCall`.\n Token bound accounts MAY implement additional authorization mechanisms\n which limit the ability of the ERC-721 token holder to execute calls.\n Token bound accounts MAY implement additional execution functions which\n grant execution permissions to other non-owner accounts.\n @return The result of the call"
									},
									"functionSelector": "9e5d4c49",
									"id": 30,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "executeCall",
									"nameLocation": "2134:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2163:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "2155:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 20,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2155:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2183:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "2175:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 22,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2175:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2213:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "2198:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 24,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2198:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2145:78:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "2250:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 27,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2250:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2249:14:0"
									},
									"scope": 47,
									"src": "2125:139:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 31,
										"nodeType": "StructuredDocumentation",
										"src": "2270:398:0",
										"text": "@dev Returns identifier of the ERC-721 token which owns the\n account\n The return value of this function MUST be constant - it MUST NOT change\n over time.\n @return chainId The EIP-155 ID of the chain the ERC-721 token exists on\n @return tokenContract The contract address of the ERC-721 token\n @return tokenId The ID of the ERC-721 token"
									},
									"functionSelector": "fc0c546a",
									"id": 40,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token",
									"nameLocation": "2682:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2687:2:0"
									},
									"returnParameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 34,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "2758:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "2750:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 33,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2750:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "tokenContract",
												"nameLocation": "2787:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "2779:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 35,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2779:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2822:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "2814:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 37,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2814:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2736:103:0"
									},
									"scope": 47,
									"src": "2673:167:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "2846:280:0",
										"text": "@dev Returns the owner of the ERC-721 token which controls the account\n if the token exists.\n This is value is obtained by calling `ownerOf` on the ERC-721 contract.\n @return Address of the owner of the ERC-721 token which owns the account"
									},
									"functionSelector": "8da5cb5b",
									"id": 46,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "3140:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3145:2:0"
									},
									"returnParameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 46,
												"src": "3171:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 43,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3171:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3170:9:0"
									},
									"scope": 47,
									"src": "3131:49:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 48,
							"src": "130:3242:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "38:3334:0"
				},
				"id": 0
			}
		}
	}
}